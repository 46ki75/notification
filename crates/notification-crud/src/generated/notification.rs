// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Notification {
    #[prost(string, tag = "1")]
    pub pk: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub details: ::prost::alloc::string::String,
    #[prost(enumeration = "Status", tag = "4")]
    pub status: i32,
    #[prost(enumeration = "Severity", tag = "5")]
    pub severity: i32,
    #[prost(string, tag = "6")]
    pub notified_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutCommand {
    #[prost(string, optional, tag = "1")]
    pub pk: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub details: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "Status", optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
    #[prost(enumeration = "Severity", optional, tag = "5")]
    pub severity: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCommand {
    #[prost(enumeration = "Status", repeated, tag = "4")]
    pub status: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCommand {
    #[prost(string, tag = "1")]
    pub pk: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(oneof = "request::Command", tags = "1, 2, 3")]
    pub command: ::core::option::Option<request::Command>,
}
/// Nested message and enum types in `Request`.
pub mod request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "1")]
        PutCommand(super::PutCommand),
        #[prost(message, tag = "2")]
        ListCommand(super::ListCommand),
        #[prost(message, tag = "3")]
        DeleteCommand(super::DeleteCommand),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<Notification>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    New = 0,
    Open = 1,
    Resolved = 2,
    Suppressed = 3,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::New => "NEW",
            Self::Open => "OPEN",
            Self::Resolved => "RESOLVED",
            Self::Suppressed => "SUPPRESSED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NEW" => Some(Self::New),
            "OPEN" => Some(Self::Open),
            "RESOLVED" => Some(Self::Resolved),
            "SUPPRESSED" => Some(Self::Suppressed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Severity {
    Info = 0,
    Warn = 1,
    Error = 2,
}
impl Severity {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Info => "Info",
            Self::Warn => "Warn",
            Self::Error => "Error",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Info" => Some(Self::Info),
            "Warn" => Some(Self::Warn),
            "Error" => Some(Self::Error),
            _ => None,
        }
    }
}
